{"organizations": [], "uuid": "12ba49abc2ec9083bb59c44544464c517859a853", "thread": {"social": {"gplus": {"shares": 0}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 0}, "facebook": {"likes": 1, "shares": 1, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "habrahabr.ru", "main_image": "https://habrahabr.ru/i/habralogo.jpg", "site_section": "http://habrahabr.ru/rss/", "section_title": "Хабрахабр / Интересные публикации", "url": "https://habrahabr.ru/post/311432/?utm_source=habrahabr&utm_medium=rss&utm_campaign=interesting", "country": "RU", "domain_rank": 1685, "title": "Валидация данных вложенных документов MongoDB в Yii2", "performance_score": 0, "site": "habrahabr.ru", "participants_count": 3, "title_full": "Валидация данных вложенных документов MongoDB в Yii2 / Хабрахабр", "spam_score": 0.0, "site_type": "news", "published": "2016-09-30T23:51:00.000+03:00", "replies_count": 4, "uuid": "e963610d94f930e945394aa1a918acf6907a1486"}, "author": "habrahabr.ru", "url": "https://habrahabr.ru/post/311432/", "ord_in_thread": 0, "title": "Валидация данных вложенных документов MongoDB в Yii2", "locations": [], "entities": {"persons": [], "locations": [], "organizations": []}, "highlightText": "", "language": "russian", "persons": [], "text": "Возможно, всё что я напишу ниже – очевидно, и все этим пользуются давно, но я вот недавно только это понял и придумал, так что, может, кому и пригодится.\n\nYii2 и расширение yii2-mongodb к сожалению, не работает с вложенными документами, тем самым оставляя за бортом существенное преимущество документоориентированной БД.\nВ документации предлагают использовать расширение для вложенных документов, но можно обойтись и без него.\nПредположим, у нас есть модель, формирующая PDF-файл для загрузки, и мы хотим следить за количеством его скачиваний, IP-адресами скачавших и, например, временем, когда файл был загружен.\n\nДля простоты я предполагаю, что сам файл хранится в строке, но это, конечно, может быть совсем не так – он может лежать где-то в хранилище или формироваться функцией.\n\nОсновная модель (часть)\n\n/** * @property string $pdf_data стока с данным, которая потом преобразуется в файл * @property array $downloads_data здесь хранятся сведения о загрузках * */ Class PdfData extends \\yii\\mongodb\\ActiveRecord /** @inheritdoc */ public static function collectionName() { return [‘database’, ‘pdf’] } /** @inheritdoc */ public function attributes() { return [ ‘pdf_data’, ‘downloads_data’ ]; } \n\nДополнительная модель – для проверки и присвоения значений элементам массива\n\nuse \\MongoDB\\BSON\\UTCDateTime /** * Класс для формирования сведений о факте загрузки файла */ class DowmnloadData extends \\yii\\base\\Model { /** @var \\MongoDB\\BSON\\UTCDateTime $datetime */ public $datetime; /** @var string $clientIp */ public $clientIp; /** @var string $clientHost */ public $clientHost; /** @var string $clientUserAgent */ public $clientUserAgent; /** @var string $referer */ public $referer; /** @var bool $result */ public $result = false; /** @inheritdoc */ public function rules() { return [ ['datetime', 'default', 'value' => function() { return new UTCDateTime(strtotime(\"now\") * 1000); }], ['clientIp', 'default', 'value' => function() { return Yii::$app->request->getUserIP(); }], ['clientHost', 'default', 'value' => function() { return Yii::$app->request->getUserHost(); }], ['clientUserAgent', 'default', 'value' => function() { return Yii::$app->request->getUserAgent(); }], ['referer', 'default', 'value' => function() { return Yii::$app->request->getReferrer(); }], ['result', 'boolean'], ]; } \n\nДалее, в действии контроллера, которое отдает файл наружу, примерно следующее:\n\n// -- skip -- /** * @param string $id идентификатор основной модели * @return null * @throws \\yii\\web\\NotFoundHttpException */ public function actionDownload($id) { if(($model = PdfData::findOne($id)) === null) throw new \\yii\\web\\NotFoundHttpException(Yii::t('app', 'File not found')); $downloadData = new DowmnloadData(); if(!empty($model->pdf_data)) { $downloadData->result = true; $downloadData->validate(); // Так мы добиваемся присвоения значений по-умолчанию $data = $model->downloads_data; // Забрали существующие сведения о загрузках $data[] = $downloadData->attributes; // Добавили к ним новые // array_values для гарантироанного сохранения массива (а не объекта) в mongodb $model->updateAttributes(['downloads_data' => array_values($data)]); // Отправляем файл Yii::$app->response->sendContentAsFile($model->pdf_data, 'we are the champions.pdf', [ 'mimeType' => 'text/xml', 'inline' => true ]); } return null; } \n\nТаким образом внутри массива downloads_data основной модели мы имеем все атрибуты, которые придумали в DowmnloadData , и можем их потом как угодно показывать и анализировать, не умножая сверх необходимого при этом ни атрибуты основной модели, ни число коллекций в БД.", "external_links": [], "published": "2016-09-30T23:51:00.000+03:00", "crawled": "2016-10-01T16:19:44.743+03:00", "highlightTitle": ""}